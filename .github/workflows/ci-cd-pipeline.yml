name: CI/CD Pipeline for Android App

on:
  push:
    branches:
      - Tracking-app  # Trigger the pipeline on pushes to the Tracking-app branch
  pull_request:
    branches:
      - Tracking-app  # Trigger for pull requests targeting the Tracking-app branch
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write  # Grant write access to the repository contents

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # Step 3: Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          components: |
            cmdline-tools;latest
            platform-tools
            platforms;android-35  # Replace with your required API level
            build-tools;33.0.0  # Replace with your required build tools version

      # Step 4: Generate local.properties
      - name: Generate local.properties
        run: |
          echo "sdk.dir=/usr/local/lib/android/sdk" > local.properties

      # Step 5: Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Step 6: Decode keystore for signing
      - name: Decode keystore from secrets
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          mkdir -p ./app/KEY_STORE
          echo "${KEYSTORE_BASE64}" | base64 --decode > ./app/KEY_STORE/Ecorvi_Tracking_App_New.jks


      # Step 8: Build Release APK
      - name: Build Release APK
        id: build_apk
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        run: ./gradlew assembleRelease

      # Step 9: Verify the generated APK file and extract its path
      - name: Verify APK path and extract the file path
        id: verify_apk
        run: |
          APK_PATH=$(find app/build/outputs/apk/release -name "app-release.apk")
          echo "APK path: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      # Step 10: Create GitHub Release and Upload APK
      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: "Automated release of APK version v${{ github.run_number }}"
          files: ${{ env.APK_PATH }}  # Use the dynamically determined APK path
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
