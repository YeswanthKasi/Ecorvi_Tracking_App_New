name: CI/CD Pipeline for Android App

on:
  push:
    branches:
      - Tracking-app  # Trigger the pipeline on pushes to the Tracking-app branch
  pull_request:
    branches:
      - Tracking-app  # Trigger for pull requests targeting the Tracking-app branch
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write  # Grant write access to repository contents

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # Step 3: Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          components: |
            cmdline-tools;latest
            platform-tools
            platforms;android-35  # Replace with your required API level
            build-tools;33.0.0  # Replace with your required build tools version

      # Step 4: Create the local.properties file
      - name: Create local.properties
        run: echo "sdk.dir=${{ github.workspace }}/android-sdk" > local.properties

      # Step 5: Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Step 6: Decode Firebase Service Account Key
      - name: Decode Firebase Service Account Key
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=$PWD/firebase-service-account.json

      # Step 7: Decode keystore for signing
      - name: Decode keystore for signing
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          mkdir -p ./app/KEY_STORE
          echo "$KEYSTORE_BASE64" | base64 --decode > ./app/KEY_STORE/Ecorvi_Tracking_App_New.jks

      # Step 8: Run unit tests
      - name: Run unit tests
        run: ./gradlew test

      # Step 9: Build Release APK
      - name: Build Release APK
        id: build_apk
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        run: ./gradlew assembleRelease

      # Step 10: Rename APK with version number
      - name: Rename APK with version number
        id: rename_apk
        run: |
          APK_PATH=$(find app/build/outputs/apk/release -name "app-release*.apk")
          TAG_NAME="v${{ github.run_number }}"
          NEW_APK_NAME="${TAG_NAME}-app-release.apk"
          mv "$APK_PATH" "app/build/outputs/apk/release/$NEW_APK_NAME"
          echo "NEW_APK_NAME=app/build/outputs/apk/release/$NEW_APK_NAME" >> $GITHUB_ENV
        env:
          GITHUB_REF: ${{ github.ref }}

      # Step 11: Check if renamed APK exists
      - name: Check if renamed APK exists
        run: |
          if [ ! -f "${{ env.NEW_APK_NAME }}" ]; then
            echo "Renamed APK not found. Build failed."
            exit 1
          fi
          echo "Renamed APK found: ${{ env.NEW_APK_NAME }}"

      # Step 12: Upload APK to Firebase App Distribution
      - name: Upload to Firebase App Distribution
        run: |
          firebase appdistribution:distribute "${{ env.NEW_APK_NAME }}" \
          --app "${{ secrets.FIREBASE_APP_ID }}" \
          --groups "testers" \
          --token "${{ secrets.FIREBASE_TOKEN }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $PWD/firebase-service-account.json

      # Step 13: Create GitHub Release and Upload Renamed APK
      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: "Automated release of APK version v${{ github.run_number }}"
          files: ${{ env.NEW_APK_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
