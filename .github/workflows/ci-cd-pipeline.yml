name: CI/CD Pipeline for Android App

on:
  push:
    branches:
      - Tracking-app  # Trigger the pipeline on pushes to the Tracking-app branch
  pull_request:
    branches:
      - Tracking-app  # Trigger for pull requests targeting the Tracking-app branch
  workflow_dispatch:  # Allows manual trigger

permissions:
  contents: write  # Grant write access to the repository contents

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      # Step 3: Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          components: |
            cmdline-tools;latest
            platform-tools
            platforms;android-35  # Replace with your required API level
            build-tools;33.0.0  # Replace with your required build tools version

      # Step 4: Create local.properties
      - name: Create local.properties
        run: echo "sdk.dir=${{ github.workspace }}/android-sdk" > local.properties

      # Step 5: Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # Step 6: Decode keystore for signing (Optional if APK is signed manually)
      - name: Decode keystore from secrets
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          mkdir -p ./app/KEY_STORE
          echo "${KEYSTORE_BASE64}" | base64 --decode > ./app/KEY_STORE/Ecorvi_Tracking_App_New.jks

      # Step 7: Run unit tests (optional, can be removed)
      - name: Run unit tests
        run: ./gradlew test

      # Step 8: Build APK (Release version)
      - name: Build Release APK
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        run: ./gradlew assembleRelease

      # Step 9: Verify the generated APK file
      - name: Verify APK path
        run: ls -la app/build/outputs/apk/release/

      # Step 10: Upload APK to Indus Appstore
      - name: Upload to Indus Appstore
        run: |
          curl -X POST \
            -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJpZGVudGl0eU1hbmFnZXIiLCJ2ZXJzaW9uIjoiNC4wIiwidGlkIjoiNzUzMTlhOTctMjE0Yi00N2Q3LTk5OTUtMzgxZjNiY2FkYmVlIiwic2lkIjoiOTZlMjNhMmMtNzc5My00OGExLWExNTgtMTVhZjZkYjZlM2E2IiwiaWF0IjoxNzMzODY2NDc2LCJleHAiOjIwNDkyMjY0NzZ9.nBicIXiEuivFckyo-kuQpG12ZhjZZxMJY33FrwW-ctKGIgwB2sjEO4sxAcO0agbLjk9KBhKqvy1x9eGuUcoezA" \
            -F "apk=@app/build/outputs/apk/release/app-release.apk" \
            https://developer-api.indusappstore.com/apis/indus-developerdashboard-service/devtools/apk/upgrade/com.ani.map

        env:
          PACKAGE_NAME: com.ani.map

      # Step 11: Create GitHub Release and Upload APK
      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: "Automated release of APK version v${{ github.run_number }}"
          files: app/build/outputs/apk/release/app-release.apk  # Use the dynamically generated APK
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
